/**
 * Script de test E2E pour valider l'int√©gration YouTube OAuth
 * Ex√©cuter avec: npx ts-node src/scripts/verify-youtube-oauth.ts
 */
import { NestFactory } from '@nestjs/core';
import { AppModule } from '../app.module';
import { YouTubeAuthService } from '../integrations/youtube/youtube-auth.service';
import { SupabaseService } from '../supabase/supabase.service';
import * as readline from 'readline';

// ID utilisateur de test (√† remplacer par un ID valide si besoin)
const TEST_USER_ID = '00000000-0000-0000-0000-000000000001';

async function bootstrap() {
  console.log('‚è≥ Initialisation du contexte NestJS...');
  // Cr√©er l'application avec le contexte complet
  const app = await NestFactory.createApplicationContext(AppModule);
  
  try {
    console.log('‚úÖ Contexte NestJS initialis√©');
    
    // R√©cup√©rer les services n√©cessaires
    const youtubeAuthService = app.get(YouTubeAuthService);
    const supabaseService = app.get(SupabaseService);
    
    console.log(`\n=== Test YouTube OAuth pour utilisateur ${TEST_USER_ID} ===`);
    
    // 1. V√©rifier si l'int√©gration existe d√©j√†
    console.log('\nüìã V√©rification d\'une int√©gration existante...');
    const hasIntegration = await youtubeAuthService.hasValidIntegration(TEST_USER_ID);
    console.log(`Int√©gration existante: ${hasIntegration ? '‚úÖ OUI' : '‚ùå NON'}`);
    
    if (hasIntegration) {
      // Afficher les d√©tails de l'int√©gration
      console.log('\nüìã D√©tails de l\'int√©gration:');
      const config = await youtubeAuthService.getIntegrationConfig(TEST_USER_ID, 'youtube');
      
      if (config) {
        console.log(`- Type d'int√©gration: YouTube`);
        console.log(`- Access token: ${config.access_token ? '[ENCRYPTED]' : '[MISSING]'}`);
        console.log(`- Refresh token: ${config.refresh_token ? '[ENCRYPTED]' : '[MISSING]'}`);
        
        // V√©rifier si le token est expir√©
        if (config.expires_at) {
          const expiresAt = new Date(config.expires_at * 1000);
          const now = new Date();
          console.log(`- Expiration du token: ${expiresAt}`);
          console.log(`- Heure actuelle: ${now}`);
          console.log(`- Statut: ${expiresAt > now ? '‚úÖ VALIDE' : '‚ö†Ô∏è EXPIR√â'}`);
          
          // Si expir√©, sugg√©rer un refresh
          if (expiresAt <= now) {
            console.log('\n‚ö†Ô∏è Le token est expir√© - test du rafra√Æchissement...');
            const refreshed = await youtubeAuthService.refreshAccessToken(TEST_USER_ID);
            console.log(`Rafra√Æchissement: ${refreshed ? '‚úÖ R√âUSSI' : '‚ùå √âCHEC'}`);
            
            if (refreshed) {
              const newConfig = await youtubeAuthService.getIntegrationConfig(TEST_USER_ID, 'youtube');
              if (newConfig && newConfig.expires_at) {
                const newExpiresAt = new Date(newConfig.expires_at * 1000);
                console.log(`- Nouvelle expiration: ${newExpiresAt}`);
              }
            }
          }
        } else {
          console.log(`- Expiration du token: [INCONNUE]`);
        }
      } else {
        console.log(`- Aucune configuration trouv√©e`);
      }
    }
    
    // 2. Menu des actions
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    console.log('\nüìã Options disponibles:');
    console.log('1. G√©n√©rer une URL d\'autorisation');
    if (hasIntegration) {
      console.log('2. Rafra√Æchir le token existant');
      console.log('3. R√©voquer l\'int√©gration');
      console.log('4. Simuler un callback OAuth complet');
      console.log('5. Quitter');
    } else {
      console.log('2. Simuler un callback OAuth complet');
      console.log('3. Quitter');
    }
    
    rl.question('\nEntrez votre choix: ', async (answer) => {
      try {
        if (answer === '1') {
          // G√©n√©rer l'URL d'autorisation
          console.log('\n‚è≥ G√©n√©ration de l\'URL d\'autorisation...');
          const authUrl = await youtubeAuthService.generateAuthUrl(TEST_USER_ID);
          console.log(`\n‚úÖ URL d'autorisation g√©n√©r√©e:`);
          console.log(`\n${authUrl}\n`);
          console.log('Ouvrez cette URL dans votre navigateur pour autoriser l\'application.');
          console.log('Apr√®s l\'autorisation, vous serez redirig√© vers l\'URL de callback configur√©e.');
        } 
        else if (answer === '2' && hasIntegration) {
          // Rafra√Æchir le token
          console.log('\n‚è≥ Rafra√Æchissement du token...');
          const refreshed = await youtubeAuthService.refreshAccessToken(TEST_USER_ID);
          console.log(`Rafra√Æchissement: ${refreshed ? '‚úÖ R√âUSSI' : '‚ùå √âCHEC'}`);
          
          if (refreshed) {
            const newConfig = await youtubeAuthService.getIntegrationConfig(TEST_USER_ID, 'youtube');
            if (newConfig && newConfig.expires_at) {
              const newExpiresAt = new Date(newConfig.expires_at * 1000);
              console.log(`- Nouvelle expiration: ${newExpiresAt}`);
            }
          }
        } 
        else if ((answer === '3' && hasIntegration) || (answer === '2' && !hasIntegration)) {
          // Simuler un callback complet
          console.log('\n‚ö†Ô∏è Simulation d\'un callback OAuth complet...');
          console.log('Cette op√©ration va simuler un retour d\'autorisation OAuth avec un code fictif');
          console.log('Note: Dans un flux r√©el, ce code serait fourni par Google apr√®s autorisation');
          
          // G√©n√©rer d'abord un √©tat et le stocker
          console.log('\n‚è≥ G√©n√©ration d\'un √©tat OAuth...');
          const authUrl = await youtubeAuthService.generateAuthUrl(TEST_USER_ID);
          
          // Extraire l'√©tat de l'URL g√©n√©r√©e
          const stateMatch = authUrl.match(/state=([^&]*)/);
          if (!stateMatch) {
            console.log('‚ùå Impossible d\'extraire l\'√©tat de l\'URL d\'autorisation');
            return;
          }
          
          const state = stateMatch[1];
          console.log(`√âtat OAuth extrait: ${state}`);
          
          // Code d'autorisation fictif - dans un flux r√©el, fourni par Google
          const fakeCode = 'fake_authorization_code_' + Date.now();
          
          console.log('\n‚ö†Ô∏è Cette simulation √©chouera car le code est fictif');
          console.log('L\'objectif est de valider que le flux appelle correctement l\'API Google');
          
          try {
            console.log('\n‚è≥ Tentative de traitement du callback avec code fictif...');
            const result = await youtubeAuthService.handleCallback(fakeCode, state);
            console.log(`R√©sultat du callback: ${result.success ? '‚úÖ R√âUSSI' : '‚ùå √âCHEC'}`);
            if (!result.success && result.error) {
              console.log(`Erreur: ${result.error}`);
            }
          } catch (callbackError) {
            console.log(`‚ùå Erreur lors du traitement du callback: ${callbackError.message}`);
          }
          
          console.log('\nüìù Note: Un √©chec ici est normal car le code est fictif');
          console.log('Dans un flux r√©el, vous utiliseriez le lien d\'autorisation g√©n√©r√©');
          console.log('et Google vous fournirait un vrai code d\'autorisation.');
        }
        else if ((answer === '4' && hasIntegration) || (answer === '3' && !hasIntegration)) {
          // Quitter
          console.log('\nüëã Au revoir!');
        }
        else if (answer === '3' && hasIntegration) {
          // R√©voquer l'int√©gration
          console.log('\n‚è≥ R√©vocation de l\'int√©gration...');
          const revoked = await youtubeAuthService.revokeIntegration(TEST_USER_ID);
          console.log(`R√©vocation: ${revoked ? '‚úÖ R√âUSSIE' : '‚ùå √âCHEC'}`);
        }
        else if (answer === '5' && hasIntegration) {
          // Quitter
          console.log('\nüëã Au revoir!');
        }
        else {
          console.log('\n‚ùå Choix invalide!');
        }
      } catch (error) {
        console.error(`\n‚ùå Erreur lors de l'ex√©cution: ${error.message}`);
      } finally {
        rl.close();
        await app.close();
      }
    });
  } catch (error) {
    console.error(`\n‚ùå Erreur fatale: ${error.message}`);
    console.error('Trace de la pile:', error.stack);
    await app.close();
  }
}

bootstrap();
